valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes --errors-for-leak-kinds=all --track-fds=yes --trace-children=yes --suppressions=readline.supp ./minishell

30/05

ls | exit   ----> sigpipe


	



< Makefile | wc -l  (se in una pipeline c'e la redirection ma no il comando,
	non manda correttamente quello che prende dal file sulla pipe) con 
    <Makefile | grep token    funziona quindi lasciamo perdere

cat | cat | grep #exit code dovrebbe essere 2  (che e quello di grep)
minishell da 130 e  poi stampa un '\n' che non dovrebbe    ctrl c non deve stampare sempre \n
per ogni ctrl + C che faccio quando rimane appeso mi stampa un cambio linea
che non andrebbe
biin/ls
/biin/ls:
bash: ./TEMPP: Permission denied    exit 126   ft_print_error 4
bash: /biin/ls: No such file or directory    exit 127    ft_print_error 3

leaks e da sistemaare tipo di errore:
cacorrea@c1r4p1:~/sgoinfre/minishell$ mm
Command 'mm' not found, but can be installed with:
apt install multimail
Please ask your administrator.
cacorrea@c1r4p1:~/sgoinfre/minishell$ /bin/lss
bash: /bin/lss: No such file or directory
cacorrea@c1r4p1:~/sgoinfre/minishell$ 



dal manuale di bash
All builtins return an exit status of 2 to indicate incorrect usage,
 generally invalid options or missing arguments. cioe 127 (125 + 2)







IN GDB
set follow-fork-mode child   per entrare nel child
set follow-fork-mode parent  per evitare di entrare nei seguenti child



LEAKS   AL 28/05/25
exit da solo leaks 40 bytes in 1 block main, aperti 3 fd
ctrl + D non leaks lascia aperti 3 fd




LEAKS OK
comandi semplici da soli:
    (cat, mkdir, rmdir, ls  lascia aperto 1 fd)
    (more lascia 3 fd aperti)
    fd ok: rm file, wc, touch


GUAI:
OLDPWD va settato dopo che si cambia directory nelle variabili di ambiente?
    perche quando parte bash non ce l'ha ma dopo che cambi si
ls | echo fine    oppure ls | cat infile   sigpipe E da gestire???
cacorrea@c1r3p8:~/sgoinfre/minishell$ /bin/ls/bb
bash: /bin/ls/bb: Not a directory
cacorrea@c1r3p8:~/sgoinfre/minishell$ echo $?
126   a me da 127



ALLOCAZIONI DA LIBERARE A FINE PROGRAMMA

la lista di environement variables che conservo in t_ms     la prendo a inizio programma e alla 
			fine la devo liberare

t_ms lo devo malloccare altrimenti va in segfaul,   ma dove?  nel main?
			quindi se malloc devo liberare

tutte i valori dentro t_ms che ho malloccato : myenv, cwd, 

tutte le liste che ho creato con malloc,  la lista di input, la lista di comandi, la lista di argomenti
			la lista di comandi la devo liberare a fine programma
			la lista di argomenti la devo liberare a fine programma
			la lista di input la devo liberare a fine programma

			
un ciclo che:
legge la linea
controlla se e valida
la mette nella lista e la espande
cerca gli operatori e fa il parsing
crea un cmdblock con il comando in una matrice e le redirections in una lista
fa una lista di cmdblocks
scorre questa lista e 
manda in esecuzionem ogni nodo (cmdblock)
salva il exit status
libera la lista con l'input
ricomincia

-----------------------------------------------------------------
read input
parse into command blocks

save stdin and stdout backup in m_ts

for each command block:
    - create pipes if needed
    - fork()
    - inside child:
        - if there is a pipe: dup2(pipe_fd, STDOUT) or STDIN
		- handle redirections (dup2)
        - execve()
    - inside parent:
        - close pipe fds
        - wait

after all:
    restore stdin and stdout from saved copy
    wait for all children
-----------------------------------------------------------------


double free, a lot of problems, how to risolve:
Set the pointer to NULL after free() to prevent accidental reuse.
Be careful with multiple pointers to the same memory: If two pointers reference the same allocated block, freeing one affects the other


LEGGI LEGGI LEGGI!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

cc=123456$USER
espande prima di salvarlo nelle envs




commands:
cat < input.txt | grep "error" | sort | uniq > output.txt
cat < infile.txt | grep error | wc -l
cat < infile.txt | grep error | wc -l > output.txt
echo "start" >> log.txt | grep "start" < input.txt
cat << EOF | grep world < input.txt >> output.txt
export "cia'o"=mondo -> deve dare errore (gia fatto)
export 'cia"o'=mondo (gia fatto)
export ciao+=mondo -> appende la stringa alla variabile gia esistente
export cia+o=mondo -> errore (gia fatto)
echo ciao | > p ->  (gia fatto)
echo ciao | > -> deve dare errore (gia fatto)
$ echo ciao | exit oppure ls | exit non fa niente (o meglio esesgue ls, lo scrive nella 
pipe poi esce dalla minishell cosi noi non vediamo il contenuto della pipe)
$ exit | ls esegue ls e non esce della minishell (segue ls ed esce dal suo child?)


cat < input | grep error < Makefile :se non esiste il file da errore,
	in ogni caso il grep lo fa su Makefiel, sia che input esista o non
First handle redirections, then if not redirections have made, handle pipes
oppure piu facile: 
Always set pipes first, redirections second — because redirections have the final word
Why?

    Redirections are more specific: if the user said cat < input.txt, they want to read from the file, not from the previous command's pipe.

    Pipes are the default connection only if no redirection replaces stdin or stdout.
If there is a redirection (<, >, >>, etc.), it overrides the pipe.

"|" ">" ">>" "<" "<<" devono essere trattati come args perche sono tra 
virgolette git logs ---> FATTO!!

echo "ciao mondo | |" -> non deve dare errore perche tra virgolette 

sytax errors in pipes:
>|	<|	>>|	<<|	|>	|<	|>>	|<<	||	| |


prima di consegnare:
levare tutti gli emoji e messaggi di errore utili per debug





23/04/25

le redirections si possono fare anche senza comandi:
> miofile
crea il file

< file
se deve leggere dal file e il file non esiste da errore: No such file or directory


TODO

int		handle_heredoc(char *delimiter); fare questa funzione

nel caso l'input sia ""  o '' gestire: errore di bash \n e Command '' not found
cacorrea@c1r4p8:~$ ""
funzionava, ora seggfault!!!!!!!!!!!!!!!!


Command '' not found, but can be installed with:
cacorrea@c1r4p8:~$ echo ciao | ""

Command '' not found, but can be installed with:

in heredoc:
se esce con ctrl+d stampare messaggio di warning come bash:
cacorrea@c1r4p4:~$ << EOF cat | grep ciao
> ciao
> ciao
> bash: warning: here-document at line 31 delimited by end-of-file (wanted `EOF')
ciao
ciao



se un solo cmd e builtin  ----->  eseguo nel parent no faccio fork
se piu di un cmd ----->  eseguo nel sempre nel child

all'inizio con dup, salvare una copia di fd 0 e di fd 1 (che prenderanno il valore
di 3 e 4 che sono i primi fd liberi) per non perdere stdin e stdout
perche nel caso di heredoc mi serve stdin e in tutti i casi alla fine li
devo ripristinare prima di chiudere la shell
If you are inside a child process, maybe you don't need to restore (because the child will exit after execve)

fn aussiliare per controllare errore e fare dup2, le passi i due 
fd e fa il dup2, se fd del file aperto e -1 vuole dire che c'e stato un errore
con open

int help_dup(int file_fs, int input_output);
{
	if (file_fs == -1)
	{
		perror("open");
		return (-1); o dirgli di uscire
	}
	dup2(file_fs, input_output);
	close (file_fs);
}

gestire heredoc per conto suo, anche l'apertura del file, quando finisce 
chiudere il file con ulink.  serve get next line
dopo che ha finito di leggere, serve fare un'ulteriore chiamata a gnl per
liberare la statica???
oppure farlo con readline che e pui semplice per la gestione dei segnali
pero bisogna aggiungere il \n alla fine
mentre con gnl ce gia il \n pero e piu complicata la gestione dei esgnali
bisogna fare un fork per la heredoc, altrimenti non funziona???? questo lo dice copilot
prima di iniziare a fare l'esecuzione bisogna aprire tutti i heredoc
e chiuderli prima di eseguire il comando poi il commando li usa come un file qualsiasi

la gestione dei segnali dentro gli heredoc e differente:
ctrl c deve uscire dalla heredoc e non dalla shell
ctrl d deve chiudere la heredoc e non la shell
ctrl \ dentro il heredoc cosa fa?

segnali in minishell:
ctrl c:  SIGINT		non deve chiudere la shell, stampa un prompt nella newline
ctrl d:  SIGQUIT	exit della shell: stampa exit ed esce
ctrl \: non fa niente, non e un segnale ma il carattere nullo


dentro heredoc:
ctrl c non esegue gli altri comandi, ma esce dalla heredoc e stampa il prompt
ctrl d da il seguente messaggio di errore:
bash: warning: here-document at line 1 delimited by end-of-file (wanted `EOF')
cacorrea@c2r3p1:~/Desktop$ cat << eof | echo ciao
> ^C
cacorrea@c2r3p1:~/Desktop$ 

da chatgpt:
 1. get_next_line (GNL)
✅ Pros:

    Simple and controlled: You wrote it yourself, so you fully control its behavior.

    No external dependencies: Doesn't rely on readline or link to -lreadline.

❌ Cons:

    Signals are harder:

        GNL reads from stdin (typically), so if a heredoc is interrupted (e.g., Ctrl+C), you must manually handle signals like SIGINT and reset the shell prompt correctly.

        This is tricky inside a forked child, especially because Bash handles SIGINT in heredoc differently than in interactive prompts.

    No line editing / history: GNL doesn’t support up/down arrows, backspace, etc. You can’t use command history either.

Example challenge with GNL:

If a user presses Ctrl+C during a heredoc:

minishell> cat << EOF
> ^C
# your minishell must stop the heredoc, not crash, and return to prompt

You’d need to:

    Detect the signal.

    Clean up the temp file.

    Avoid printing weird things.

    Reset the prompt.

🔹 2. readline
✅ Pros:

    Signal handling is done for you: readline takes care of:

        SIGINT (Ctrl+C) — it exits the read cleanly.

        SIGQUIT (Ctrl+\) — not handled unless you configure it.

    User-friendly:

        Line editing.

        Arrow key navigation.

        History integration (if you want).

    Cleaner code: readline() returns NULL on Ctrl+D and respects user interruptions naturally.

❌ Cons:

    Requires linking with -lreadline.

    More overhead: If you're not already using readline in your shell, it means introducing a new dependency.

✅ Which One Should You Use?

For the heredoc specifically, use readline. Here's why:

    You need to handle SIGINT (Ctrl+C) differently in heredoc mode than in normal shell input. Bash exits heredoc input on SIGINT but doesn't kill the main shell. readline makes this much easier to replicate.

    It's closer to how bash behaves.

    You'll spend less time debugging signals and can still use your own get_next_line elsewhere (like in pipelines or I/O redirection).


da finire controlli su heredoc 'EOF' fra virgolette











